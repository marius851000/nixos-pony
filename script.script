screen_width = Window.GetWidth();
screen_height = Window.GetHeight();

// size of the original image, for getting the ratio (4K). TODO: only load 4K assets on high res screen, otherwise, use an alternate set scaled down by 2 (in width and in height)
reference_width = 3840;
reference_height = 2160;

//There are 2 primary components: Nixos and the position the NixOs logo

time = 1; //start as 1, so 0 can be used for null value

//////////////
// The pony //
//////////////
pony_image = Image("pony.png");
//try to make it proportional to height, but make sure it fit in the width too
pony_scale = screen_height / reference_height;
if (screen_width < (pony_scale * pony_image.GetWidth())) {
  pony_scale = screen_width / pony_image.GetWidth();
}
pony_image_scaled = pony_image.Scale(pony_image.GetWidth() * pony_scale, pony_image.GetHeight() * pony_scale);
pony_sprite = Sprite(pony_image_scaled);
pony_x = screen_width - pony_image_scaled.GetWidth();
pony_y = screen_height - pony_image_scaled.GetHeight();
pony_sprite.SetX(pony_x);
pony_sprite.SetY(pony_y);
pony_sprite.SetZ(0);

reference_screen_x = screen_width - reference_width * pony_scale;
reference_screen_y = screen_height - reference_height * pony_scale;

///////////////////
// The “panes” //
///////////////////
pane_image = Image("floating_pane.png");
pane_image_scaled = pane_image.Scale(pony_scale * pane_image.GetWidth(), pony_scale * pane_image.GetHeight());
pane_sprite = Sprite(pane_image_scaled);
pane_x = reference_screen_x + 1068 * pony_scale;
pane_y = reference_screen_y + 1068 * pony_scale;
pane_sprite.SetX(pane_x);
pane_sprite.SetY(pane_y);
pane_sprite.SetZ(10);

//////////////////////////
// The background color //
//////////////////////////

Window.SetBackgroundTopColor(0.184, 0.188, 0.184);
Window.SetBackgroundBottomColor(0.184, 0.188, 0.184);

///////////////////////////
// The background fading //
///////////////////////////
background_fade_image = Image("background_fade.png");
//apply the same scale than on the pony for th
//TODO: should re-work the ditheringe Y axis
background_fade_image_scaled = background_fade_image.Scale(screen_width, background_fade_image.GetHeight() * pony_scale);
background_fade_sprite = Sprite(background_fade_image_scaled);
background_fade_sprite.SetX(0);
background_fade_sprite.SetY(screen_height - background_fade_image_scaled.GetHeight());
background_fade_sprite.SetZ(-10);

////////////////////
// The NixOS logo //
////////////////////
nixos_image_gray = Image("nix-logo-gray.png");
nixos_image_color = Image("nix-logo-color.png");
//TODO: compute its own scale
nixos_x = pony_scale * 238;
nixos_y = pony_scale * 187;
nixos_image_gray_scaled = nixos_image_gray.Scale(nixos_image_gray.GetWidth() * pony_scale, nixos_image_gray.GetHeight() * pony_scale);
nixos_image_color_scaled = nixos_image_color.Scale(nixos_image_color.GetWidth() * pony_scale, nixos_image_color.GetHeight() * pony_scale);
nixos_sprite_gray = Sprite(nixos_image_gray_scaled);
nixos_sprite_color = Sprite(nixos_image_color_scaled);
nixos_sprite_gray.SetPosition(nixos_x, nixos_y, -5);
nixos_sprite_color.SetPosition(nixos_x, nixos_y, -4);
nixos_sprite_color.SetOpacity(0);

fun progress_callback(time_elapsed, progress) {
  nixos_sprite_color.SetOpacity(progress);
  nixos_sprite_gray.SetOpacity(1-progress);
}
Plymouth.SetBootProgressFunction(progress_callback);

//////////////////////////
// The magic particules //
//////////////////////////
average_particule_ttl = 160;
ttl_random_scale = 0.2;
targeted_number_particule = 23;
spawn_every_frame_on_average = average_particule_ttl / targeted_number_particule;


//TODO: make it a non–linear movement (maybe)
particules = []; // an entry: [ sprite, spawn_time, mov_x, mov_y, opacity_scale, ttl], spawn_time = 0 for unloaded
for (index = 0; index < 30; index++) {
  particules[index] = [];
  particules[index]["sprite"] = Sprite();
  particules[index]["sprite"].SetZ(8);
  particules[index]["spawn_time"] = 0;
  particules[index]["mov_x"] = 0;
  particules[index]["mov_y"] = 0;
}

particule_image = Image("magic_particule.png");
particule_images_scaled = [];
// the particule image is not a perfect square
for (index = 0; index < 4; index++) {
  this_particule_scale = (pony_scale / 6) * (index/2 + 1);
  particule_images_scaled[index] = particule_image.Scale(particule_image.GetWidth() * this_particule_scale, particule_image.GetHeight() * this_particule_scale);
}

nb_spawned_particule = 0;
fun spawn_particule() {
  for (index = 0; index < 30; index++) {
    if (particules[index]["spawn_time"] == 0) {
      random_for_image = Math.Random()*100;
      if (random_for_image < 10) {
        image_index = 3;
      } else if (random_for_image < 30) {
        image_index = 2;
      } else if (random_for_image < 70) {
        image_index = 1;
      } else {
        image_index = 0;
      }
      particules[index]["spawn_time"] = time;
      angle = Math.Random() * Math.Pi + Math.Pi*0.75;
      movement_scale = pony_scale * Math.Random() * 0.5 + 0.25;
      particules[index]["mov_x"] = Math.Sin(angle) * movement_scale;
      particules[index]["mov_y"] = Math.Cos(angle) * movement_scale;
      placement_random = Math.Random() * 0.6;
      placement_other_axis_random = Math.Random() * placement_random;
      particules[index]["spawn_x"] = reference_screen_x + 1746 * pony_scale - particule_images_scaled[image_index].GetWidth()/2 + placement_random*219 + placement_other_axis_random*54;
      particules[index]["spawn_y"] = reference_screen_y + 949 * pony_scale - particule_images_scaled[image_index].GetHeight()/2 + placement_random*77 + placement_other_axis_random*34;
      particules[index]["opacity_scale"] = Math.Random()*0.3 + 0.7;
      particules[index]["ttl"] = Math.Random() * average_particule_ttl * ttl_random_scale*2 + average_particule_ttl - average_particule_ttl * ttl_random_scale;
      particules[index]["sprite"].SetImage(particule_images_scaled[image_index]);
      nb_spawned_particule++;
      return;
    }
  }
  return;
}

for (index = 0; index < Math.Random() * 6 + targeted_number_particule-3; index++) {
  spawn_particule();
  particules[index]["spawn_time"] = time - Math.Random() * particules[index]["ttl"];
}

///////////////////////////
// The magic on the horn //
///////////////////////////

//TODO: maybe smooth fading will produce better looking result
horn_magic_image_scaled = [];
for (index = 0; index < 3; index++) {
  temp_horn_magic_image = Image("magic_" + (index + 1) + ".png");
  horn_magic_image_scaled[index] = temp_horn_magic_image.Scale(temp_horn_magic_image.GetWidth() * pony_scale, temp_horn_magic_image.GetHeight() * pony_scale);
}

horn_magic_sprite = Sprite(horn_magic_image_scaled[1]);
horn_magic_sprite.SetX(reference_screen_x + 1661 * pony_scale);
horn_magic_sprite.SetY(reference_screen_y + 871 * pony_scale);
horn_magic_sprite.SetZ(3);

//////////
// Eyes //
//////////
eye_l_open_image = Image("eye_l_open.png");
eye_l_open_image_scaled = eye_l_open_image.Scale(eye_l_open_image.GetWidth() * pony_scale, eye_l_open_image.GetHeight() * pony_scale);
eye_l_open_sprite = Sprite(eye_l_open_image_scaled);
eye_l_open_sprite.SetX(reference_screen_x + 1804 * pony_scale);
eye_l_open_sprite.SetY(reference_screen_y + 1103 * pony_scale);
eye_l_open_sprite.SetZ(2);

eye_l_closed_image = Image("eye_l_closed.png");
eye_l_closed_image_scaled = eye_l_closed_image.Scale(eye_l_closed_image.GetWidth() * pony_scale, eye_l_closed_image.GetHeight() * pony_scale);
eye_l_closed_sprite = Sprite(eye_l_closed_image_scaled);
eye_l_closed_sprite.SetX(reference_screen_x + 1804 * pony_scale);
eye_l_closed_sprite.SetY(reference_screen_y + 1103 * pony_scale);
eye_l_closed_sprite.SetZ(2);
eye_l_closed_sprite.SetOpacity(0);

eye_r_closed_image = Image("eye_r_closed.png");
eye_r_closed_image_scaled = eye_r_closed_image.Scale(eye_r_closed_image.GetWidth() * pony_scale, eye_r_closed_image.GetHeight() * pony_scale);
eye_r_closed_sprite = Sprite(eye_r_closed_image_scaled);
eye_r_closed_sprite.SetX(reference_screen_x + 2061 * pony_scale);
eye_r_closed_sprite.SetY(reference_screen_y + 1096 * pony_scale);
eye_r_closed_sprite.SetZ(2);
eye_r_closed_sprite.SetOpacity(0);

blink_base_frequency = 200;
blink_random_frequency = 250;
previous_blink_time = -100;
next_blink_time = (blink_base_frequency + blink_random_frequency) * Math.Random() + 1;
//////////////////
// The movement //
//////////////////

fun refresh_callback ()
{
  time++;
  
  //Pane
  //TODO: find a better curve
  pane_sprite.SetY(pane_y + ((Math.Sin(time/90+3) + Math.Cos(time/60))*40) * pony_scale);
  pane_sprite.SetX(pane_x + Math.Cos(time/300) * 10 * pony_scale);

  //Particules
  spawn_bias = 1;
  if (nb_spawned_particule < targeted_number_particule-3) {
    spawn_bias = 0.5;
  } else if (nb_spawned_particule > targeted_number_particule+3) {
    spawn_bias = 2;
  }
  if (Math.Random()*spawn_every_frame_on_average*spawn_bias < 1) {
    spawn_particule();
  }
  for (index = 0; index < 30; index++) {
    if (particules[index]["spawn_time"] != 0) {
      particule_time = time - particules[index]["spawn_time"];
      particules[index]["sprite"].SetX(particules[index]["mov_x"] * particule_time + particules[index]["spawn_x"]);
      particules[index]["sprite"].SetY(particules[index]["mov_y"] * particule_time + particules[index]["spawn_y"]);
      start_fade_time = 60; //TODO: maybe make that a particule property
      if (particule_time < 20) {
        particule_opacity = (1/20) * particule_time;
      } else {
        if (particule_time >= start_fade_time) {
          particule_opacity = 1 - ((particule_time - start_fade_time) / particules[index]["ttl"]);
        } else {
          particule_opacity = 1;
        }
      }
      // The base image is multiplied by 6 to minimize color–banding when changing the opacity
      particules[index]["sprite"].SetOpacity(0.16666 * particule_opacity);
      //particules[index]["sprite"].SetOpacity(1);
      if (particule_opacity < 0) {
        particules[index]["spawn_time"] = 0;
      }
    }
  }

  //horn magic
  if ((time % 15) == 0) {
    horn_magic_sprite.SetImage(horn_magic_image_scaled[Math.Int(time/15)%3]);
  }

  //blinking
  if (time >= next_blink_time) {
    previous_blink_time = next_blink_time;
    next_blink_time = time + blink_base_frequency + blink_random_frequency * Math.Random();
  }
  if (time >= previous_blink_time) {
    blink_time = time - previous_blink_time;
    if (blink_time <= 8) {
      blink_ratio = 0.1*(blink_time + 1);
    } else if (blink_time <= 11) {
      blink_ratio = 1;
    } else if (blink_time <= 20) {
      blink_ratio = 1 - 0.1*(blink_time - 12 + 1);
      //blink_ratio = 0;
    } else {
      blink_ratio = 0;
    }
    eye_l_open_sprite.SetOpacity(1 - blink_ratio);
    eye_l_closed_sprite.SetOpacity(blink_ratio);
    eye_r_closed_sprite.SetOpacity(blink_ratio);
  }
}

Plymouth.SetRefreshFunction (refresh_callback);